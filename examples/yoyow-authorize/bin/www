#!/usr/bin/env node

import { ChainStore } from "yoyowjs-lib";
import { Apis } from "yoyowjs-ws";

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('yoyow-authorize:server');
var http = require('http');
var config = require("../conf/config");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var server = null;

/**
 * Create API
 */
Apis.setRpcConnectionStatusCallback((msg) => {
    //open,error,closed
    console.log('Api status:', msg);
    if (msg === "closed") {
        Apis.reset(config.apiServer);
    }
});
Apis.instance(config.apiServer, true).init_promise.then((result) => {
    console.log('Api connected......');
    ChainStore.init().then(()=>{
        /**
         * Create HTTP server.
         */
        server = http.createServer(app);

        /**
         * Listen on provided port, on all network interfaces.
         */
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
        console.log('HTTP opened port:', port);
    });
}).catch(err => {
    console.log("Api init error:", err);
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
